diff --git a/third_party/blink/renderer/core/html/media/autoplay_policy.cc b/third_party/blink/renderer/core/html/media/autoplay_policy.cc
index ad5f2bf069270b6ed411e937e762d4d87580a9a7..0b6758efcc1ac6a331150e75ad4ff4ae75ceebce 100644
--- a/third_party/blink/renderer/core/html/media/autoplay_policy.cc
+++ b/third_party/blink/renderer/core/html/media/autoplay_policy.cc
@@ -7,6 +7,7 @@
 #include "build/build_config.h"
 #include "third_party/blink/public/mojom/autoplay/autoplay.mojom-blink.h"
 #include "third_party/blink/public/mojom/feature_policy/feature_policy.mojom-blink.h"
+#include "third_party/blink/public/platform/web_content_settings_client.h"
 #include "third_party/blink/public/platform/web_media_player.h"
 #include "third_party/blink/public/web/web_local_frame.h"
 #include "third_party/blink/public/web/web_local_frame_client.h"
@@ -137,6 +138,11 @@ bool AutoplayPolicy::DocumentHasUserExceptionFlag(const Document& document) {
 // static
 bool AutoplayPolicy::DocumentShouldAutoplayMutedVideos(
     const Document& document) {
+#if defined(BRAVE_CHROMIUM_BUILD)
+  if (GetAutoplayPolicyForDocument(document) ==
+      AutoplayPolicy::Type::kUserGestureRequired)
+    return false;
+#endif
   return GetAutoplayPolicyForDocument(document) !=
          AutoplayPolicy::Type::kNoUserGestureRequired;
 }
@@ -306,6 +312,10 @@ bool AutoplayPolicy::IsGestureNeededForPlayback() const {
   if (!IsLockedPendingUserGesture())
     return false;
 
+#if defined(BRAVE_CHROMIUM_BUILD)
+  if (IsAutoplayAllowedPerSettings())
+    return false;
+#endif
   // We want to allow muted video to autoplay if the element is allowed to
   // autoplay muted.
   return !IsEligibleForAutoplayMuted();
@@ -317,6 +327,15 @@ String AutoplayPolicy::GetPlayErrorMessage() const {
              : kErrorAutoplayFuncMobile;
 }
 
+bool AutoplayPolicy::IsAutoplayAllowedPerSettings() const {
+  LocalFrame* frame = element_->GetDocument().GetFrame();
+  if (!frame)
+    return false;
+  if (auto* settings_client = frame->GetContentSettingsClient())
+    return settings_client->AllowAutoplay(true /* default_value */);
+  return true;
+}
+
 bool AutoplayPolicy::WasAutoplayInitiated() const {
   DCHECK(autoplay_initiated_.has_value());
   return *autoplay_initiated_;
